!function(){var a=angular.module("holdemApp",["ngRoute","ngAnimate","holdemFilters","holdemControllers","holdemServices","holdemDirectives","holdemConstants","ui.bootstrap"]);a.config(["$routeProvider","$locationProvider",function(a,b){a.when("/game",{templateUrl:"/partials/game",controller:"GameCtrl"}).otherwise({redirectTo:"/game"}),b.html5Mode(!0)}])}(window),function(){var a=angular.module("holdemControllers",[]);a.controller("GameCtrl",["$scope","gameService","uiService","HOLDEM_EVENTS","$modal",function(a,b,c,d){a.gameStarted=!1,a.handNr=null,a.currentBlinds=b.currentBlinds,a.addPlayer=function(){c.promptForNewPlayer(function(c){b.addPlayer(c),a.players=b.players})},a.startGame=function(){return b.players.length<2?void c.errorMessage("At least two players need to be added to the game."):void b.startGame()},a.nextHand=function(){b.doesHandRequireMoreAction()?c.confirmDecision("This hand requires more action. Do you really want to advance to the next hand?","Advance to next hand","Cancel",function(){b.nextHand(),a.$apply()}):b.nextHand()},a.advanceBettingRound=function(){b.advanceBettingRound()},a.$on(d.GAME_STARTED,function(){a.gameStarted=!0}),a.$on(d.NEXT_HAND_DEALT,function(b,c){a.handNr=c}),a.$on(d.BETTING_ROUND_ADVANCED,function(b,c){a.currentBettingRound=c})}]),a.controller("AddPlayerController",["$scope","$modalInstance",function(a,b){a.ok=function(){a.player&&(a.player.stack=parseInt(a.player.stack)),b.close(a.player)},a.cancel=function(){b.dismiss("cancel")}}]),a.controller("HoleCardsController",["$scope","$modalInstance","player","card1","card2","gameService",function(a,b,c,d,e,f){a.player=f.players[c],a.card1=d,a.card2=e,a.ok=function(){try{f.assignHoleCardsToPlayer(c,a.card1,a.card2),b.close()}catch(d){a.error=d}},a.cancel=function(){b.dismiss("cancel")}}])}(window),function(a,b){var c=angular.module("holdemDirectives",[]);c.directive("playerPanel",["HOLDEM_EVENTS","gameService","HOLDEM_ACTIONS","uiService","$timeout",function(a,c,d,e,f){return{restrict:"E",templateUrl:"/partials/player-panel",replace:!0,scope:{seatNr:"=seatNr"},link:function(b,c){var d=b.seatNr-1;b.$on(a.TURN_ASSIGNED,function(a,b){b===d?(c.addClass("has-turn"),f(function(){c.find(".action-controls input, .action-controls button").prop("disabled",!1),c.find("input.raise-amount-txt").focus()})):(c.removeClass("has-turn"),f(function(){c.find(".action-controls input, .action-controls button").prop("disabled",!0)}))})},controller:["$scope","$timeout",function(f,g){function h(a){var b=a[l];i(b)}function i(a){g(function(){f.player=a})}function j(){f.disabled=!0}function k(){f.disabled=!1}var l=f.seatNr-1;f.playerInfo={isDealer:!1,isSmallBlind:!1,isBigBlind:!1},f.showHoleCards=function(){var a=c.getHoleCardsOfPlayerInCurrentHand(l);e.promptForHoleCards(l,a?a[0]:b,a?a[1]:b)},f.deletePlayer=function(){c.deletePlayer(l)},f.isGameStarted=function(){return c.gameStarted},f.isCheckingAnOption=function(){return c.isCheckingAnOptionForPlayer(l)},f.isBettingAnOption=function(){return c.isBettingAnOptionForPlayer(l)},f.getAmountToCall=function(){return c.getAmountToCallForPlayer(l)},f.checkFold=function(){if(f.isCheckingAnOption())try{c.recordAction({player:l,action:d.CHECK})}catch(a){e.errorMessage(a)}else try{c.recordAction({player:l,action:d.FOLD})}catch(a){e.errorMessage(a)}},f.call=function(){var a=c.getAmountToCallForPlayer(l);if(!a)return void e.errorMessage("A call is not a viable option.");try{c.recordAction({player:l,action:d.CALL,amount:a})}catch(b){e.errorMessage(b)}},f.betRaise=function(){if(betRaiseAmount=parseInt(f.betRaise.amount),isNaN(betRaiseAmount)&&e.errorMessage("Bet/raise amount is not numeric."),f.isBettingAnOption())try{c.recordAction({player:l,action:d.BET,amount:betRaiseAmount}),delete f.betRaise}catch(a){e.errorMessage(a)}else try{c.recordAction({player:l,action:d.RAISE,amount:betRaiseAmount}),delete f.betRaise}catch(a){e.errorMessage(a)}},f.$on(a.PLAYER_ADDED,function(a,b){h(b)}),f.$on(a.PLAYER_DELETED,function(a,b){h(b)}),f.$on(a.ROLES_ASSIGNED,function(a,b){f.playerInfo.isDealer=l===b.dealer,f.playerInfo.isSmallBlind=l===b.smallBlind,f.playerInfo.isBigBlind=l===b.bigBlind}),f.$on(a.ACTION_PERFORMED,function(a,b){b.player===l&&(f.playerInfo.mostRecentAction=b),c.isCurrentBettingRoundFinished()&&j()}),f.$on(a.NEXT_HAND_DEALT,function(){f.playerInfo.mostRecentAction=b}),f.$on(a.BETTING_ROUND_ADVANCED,function(){k(),f.playerInfo.mostRecentAction=null})}]}}]),c.directive("cardpicker",["$timeout","cardService",function(a,b){return{restrict:"E",templateUrl:"/partials/cardpicker",replace:!0,require:"ngModel",scope:{},link:function(c,d,e,f){a(function(){function a(){var a=c.selectedCard.suit,e=c.selectedCard.rank;a&&e&&(d.find(".card-thumbnail").attr("src",b.getCardImagePath(e,a)),f.$setViewValue(c.selectedCard))}function e(a){$(a).parent().siblings().removeClass("btn-info").addClass("btn-default"),$(a).parent().removeClass("btn-default").addClass("btn-info")}d.find(".suit-radio-button").change(function(){var b=$(this).val();c.selectedCard.suit=b,a(),e(this)}),d.find(".rank-radio-button").change(function(){var b=$(this).val();c.selectedCard.rank=b,a(),e(this)});var g=f.$viewValue;g&&(d.find(".suit-radio-button[value="+g.suit+"]").prop("checked",!0).trigger("click").trigger("change"),d.find(".rank-radio-button[value="+g.rank+"]").prop("checked",!0).trigger("click").trigger("change"))})},controller:["$scope",function(a){a.suits=b.allSuits,a.ranks=b.allRanks,a.getCardImagePath=b.getCardImagePath,a.selectedCard={}}]}}])}(window),function(){var a=angular.module("holdemFilters",[]);a.filter("stackSize",[function(){return function(a){return"number"==typeof a?"Stack size: "+a:void 0}}]),a.filter("handNrFilter",[function(){return function(a){return"number"==typeof a?"Hand #"+a:void 0}}]),a.filter("playerAction",["HOLDEM_ACTIONS",function(a){return function(b){if(b){var c=b.action;return c===a.CHECK||c===a.FOLD?b.action:b.action+" "+b.amount}return""}}]),a.filter("bettingRound",["HOLDEM_BETTING_ROUNDS",function(a){return function(b){if(b){var c;switch(b){case a.PRE_FLOP:c="PRE-FLOP";break;case a.FLOP:c="FLOP";break;case a.TURN:c="TURN";break;case a.RIVER:c="RIVER";break;default:throw"Illegal betting round"}return"Current betting round: "+c}}}]),a.filter("checkOrFoldLabel",[function(){return function(a){return a?"CHECK":"FOLD"}}]),a.filter("betOrRaiseLabel",[function(){return function(a,b){return a?"BET"+(b?" "+b:""):"RAISE "+(b?" "+b:"")}}]),a.filter("callLabel",[function(){return function(a){return a?"CALL "+a:"CALL"}}]),a.filter("blinds",[function(){return function(a){return a?a.smallBlind+"/"+a.bigBlind:void 0}}])}(window),function(a,b){var c=angular.module("holdemServices",[]);c.service("gameService",["$rootScope","HOLDEM_EVENTS","HOLDEM_ACTIONS","HOLDEM_BETTING_ROUNDS","cardService",function(a,c,d,e,f){function g(){var b=x.getCurrentHand(),d=x.getPreviousHand();if(d){var e=x.players.length-x.finishedPlayers.length===2,f=k(d.roles.dealer,!1),g=k(f,e),h=k(g,!1);b.roles={dealer:f,smallBlind:g,bigBlind:h}}else b.roles=x.players.length>2?{dealer:0,smallBlind:1,bigBlind:2}:{dealer:0,smallBlind:0,bigBlind:1};a.$broadcast(c.ROLES_ASSIGNED,b.roles)}function h(d){if(d){var e=x.players.length-x.finishedPlayers.length;return x.whoseTurnItIs=e>2?j():k(x.getCurrentHand().roles.smallBlind,!1),void a.$broadcast(c.TURN_ASSIGNED,x.whoseTurnItIs)}if(x.isCurrentBettingRoundFinished())x.whoseTurnItIs=b;else{var f=x.getLastAction().player;x.whoseTurnItIs=k(f,!1),a.$broadcast(c.TURN_ASSIGNED,x.whoseTurnItIs)}}function i(){var a=x.getCurrentHand(),b={player:a.roles.smallBlind,action:d.BET,amount:a.blinds.smallBlind},c={player:a.roles.bigBlind,action:d.RAISE,amount:a.blinds.bigBlind};x.recordAction(b,!0),x.recordAction(c)}function j(){var a=x.getCurrentHand(),b=a.roles.smallBlind;return k(b,!0)}function k(a,b){for(var c,d=b?0:1,e=x.getCurrentHand(),f=a+d;f<a+x.players.length;f++)if(c=f%x.players.length,!x.isPlayerFinished(c)&&e.foldedPlayers.indexOf(c)<0)return c;throw"No unfinished player found"}function l(a){for(var b=x.getCurrentHand().actions,c=[],d=0;d<b.length;d++)b[d].bettingRound===x.currentBettingRound&&(a?Array.isArray(a)?a.indexOf(b[d].action)>-1&&c.push(b[d]):b[d].action===a&&c.push(b[d]):c.push(b[d]));return c}function m(a){for(var b,c={},e=0;e<a.length;e++)b=a[e],b.action===d.CHECK?c[b.player]=c[b.player]||0:b.action===d.FOLD?delete c[b.player]:c.hasOwnProperty(b.player)?c[b.player]+=b.amount:c[b.player]=b.amount;return c}function n(a){var b,c;for(var d in a)a.hasOwnProperty(d)&&(c=a[d],(!b||c>b.amount)&&(b={player:d,amount:c}));return b}function o(a,b){for(var c=[],d=0;d<x.players.length;d++)a.commitments.hasOwnProperty(d)&&b.indexOf(d)<0&&c.indexOf(a.commitments[d])<0&&c.push(a.commitments[d]);return c}function p(a){return a.action!==d.CALL?!1:x.getAmountToCallForPlayer(a.player)===a.amount}function q(a,b){return a.action!==d.BET?!1:x.isBettingAnOptionForPlayer(a.player)?b?a.amount===x.getCurrentHand().blinds.smallBlind:a.amount>=x.getAmountToMinRaiseForPlayer(a.player)&&a.amount<=x.players[a.player].stack:!1}function r(a){return a.action!==d.RAISE?!1:a.amount>=x.getAmountToMinRaiseForPlayer(a.player)&&a.amount<=x.players[a.player].stack}function s(a){return a.action!==d.CHECK?!1:x.isCheckingAnOptionForPlayer(a.player)}function t(b,d){x.players[b].stack+=d,a.$broadcast(c.PLAYER_WON_MONEY,{player:b,amount:d})}function u(){v(),w()}function v(){for(var b=0;b<x.players.length;b++)x.finishedPlayers.indexOf(b)<0&&0===x.players[b].stack&&(x.finishedPlayers.push(b),a.$broadcast(c.PLAYER_FINISHED,b))}function w(){if(x.players.length-x.finishedPlayers.length===1){for(var b=[],d=0;d<x.players.length;d++)x.finishedPlayers.indexOf(d)<0&&b.push(d);if(1!==b.length)throw"More or less than one player left despite array lengths indicate there should only be one.";x.gameFinished=!0,a.$broadcast(c.PLAYER_WON_TOURNAMENT,b[0])}}var x=this;this.players=[],this.finishedPlayers=[],this.allHands=[],this.gameStarted=!1,this.gameFinished=!1,this.currentBettingRound=null,this.whoseTurnItIs=b,this.currentBlinds={smallBlind:10,bigBlind:20},this.addPlayer=function(b){return this.gameStarted?!1:(b=b||{},b.name=b.name||"Player "+(this.players.length+1),b.stack=b.stack||1500,this.players.push(b),void a.$broadcast(c.PLAYER_ADDED,this.players))},this.deletePlayer=function(b){return this.gameStarted?!1:(this.players.splice(b,1),void a.$broadcast(c.PLAYER_DELETED,this.players))},this.isPlayerFinished=function(a){return this.finishedPlayers.indexOf(a)>-1},this.startGame=function(){this.gameStarted=!0,this.currentBettingRound=e.PRE_FLOP,a.$broadcast(c.GAME_STARTED),this.nextHand()},this.nextHand=function(){if(this.gameFinished)throw"Game already finished";var b=this.allHands.length+1,d={};this.currentBettingRound=e.PRE_FLOP;for(var f=0;f<this.players.length;f++)this.finishedPlayers.indexOf(f)<0&&(d[f]=0);var h={amount:0,commitments:d};this.allHands.push({handNr:b,blinds:this.currentBlinds,foldedPlayers:[],actions:[],board:{flop:[],turn:null,river:null},holeCards:[],pot:h}),a.$broadcast(c.NEXT_HAND_DEALT,b),a.$broadcast(c.BETTING_ROUND_ADVANCED,this.currentBettingRound),g(),x.whoseTurnItIs=this.getCurrentHand().roles.smallBlind,i()},this.getHoleCardsOfPlayerInCurrentHand=function(a){if(!this.gameStarted||!this.getCurrentHand())throw"Game not started yet";for(var b=this.getCurrentHand().holeCards,c=0;c<b.length;c++)if(b[c].player===a)return b[c].cards},this.assignHoleCardsToPlayer=function(a,b,c){if(!b||!c)throw{message:"Both cards need to be defined."};if(!this.gameStarted||!this.getCurrentHand())throw{message:"Game not started yet."};if(this.isPlayerFinished(a))throw{message:this.players[a].name+" is already finished."};if(f.areCardsEqual(b,c))throw{message:"Cards have to be different."};var d=this.getHoleCardsOfPlayerInCurrentHand(a);d?(d.length=0,d.push(b),d.push(c)):this.getCurrentHand().holeCards.push({player:a,cards:[b,c]})},this.assignFlopCards=function(){},this.advanceBettingRound=function(){if(!this.isCurrentBettingRoundFinished())throw"Current betting round wasn't yet finished";switch(this.currentBettingRound){case e.PRE_FLOP:this.currentBettingRound=e.FLOP;break;case e.FLOP:this.currentBettingRound=e.TURN;break;case e.TURN:this.currentBettingRound=e.RIVER;break;case e.RIVER:throw"There is no betting round after the river"}a.$broadcast(c.BETTING_ROUND_ADVANCED,this.currentBettingRound),h(!0)},this.getCurrentHand=function(){return this.allHands.length<1?null:this.allHands[this.allHands.length-1]},this.getPreviousHand=function(){return this.allHands.length<2?null:this.allHands[this.allHands.length-2]},this.recordAction=function(b,e){if(!this.doesHandRequireMoreAction()||this.isCurrentBettingRoundFinished())throw"No more action required in this hand or betting round";if(!b.hasOwnProperty("player")||!b.action)throw"No player or action given";if(b.player!==this.whoseTurnItIs)throw"Player acted out of turn";if(b.action!==d.FOLD&&b.action!==d.CHECK&&!b.hasOwnProperty("amount"))throw"No amount given in a non-fold/check action";var f=this.getCurrentHand();if(b.action===d.FOLD)f.foldedPlayers.push(b.player);else if(b.action===d.CALL){if(!p(b))throw"Invalid call"}else if(b.action===d.BET){if(!q(b,e))throw"Invalid bet"}else if(b.action===d.RAISE){if(!r(b))throw"Invalid raise"}else if(b.action===d.CHECK&&!s(b))throw"Invalid check";b.hasOwnProperty("amount")&&(this.players[b.player].stack-=b.amount,f.pot.amount+=b.amount,f.pot.commitments[b.player]+=b.amount),b.bettingRound=this.currentBettingRound,f.actions.push(b),a.$broadcast(c.ACTION_PERFORMED,b),h()},this.isCurrentBettingRoundFinished=function(){var a=l(),b=l(d.FOLD),c=this.players.length-this.finishedPlayers.length-this.getCurrentHand().foldedPlayers.length+b.length;if(this.currentBettingRound===e.PRE_FLOP){if(a.length-2<c)return!1}else if(a.length<c)return!1;for(var f=m(a),g=n(f),h=0;h<this.players.length;h++)if(f.hasOwnProperty(h)&&0!==this.players[h].stack&&f[h]!==g.amount)return!1;return!0},this.getLastAction=function(){var a=x.getCurrentHand();if(!a.actions||!a.actions.length)throw"No actions yet in current hand";return a.actions[a.actions.length-1]},this.doesHandRequireMoreAction=function(){if(!this.isCurrentBettingRoundFinished())return!0;if(this.currentBettingRound===e.RIVER&&this.isCurrentBettingRoundFinished())return!1;var a=this.players.reduce(function(a,b,c){return x.getCurrentHand().foldedPlayers.indexOf(c)<0&&a.push(c),a},[]);if(a.length<2)return!1;for(var b=0,c=0;c<a.length;c++)if(this.players[a[c]].stack>0&&b++,b>=2)return!0;return!1},this.doesHandRequireShowdown=function(){if(this.doesHandRequireMoreAction())return!1;var a=this.players.length-this.finishedPlayers.length,b=a-this.getCurrentHand().foldedPlayers.length;return b>=2},this.resolveCurrentHandByShowdown=function(a){if(this.doesHandRequireMoreAction())throw"Hand requires more action";if(!this.doesHandRequireShowdown())throw"Hand requires no showdown";for(var b=this.convertToSidePots(this.getCurrentHand().pot),c=[],d=0;d<b.length;d++){for(var e=b[d].eligiblePlayers,f=!1,g=0;g<a.length;g++)if(!f)if(Array.isArray(a[g])){for(var h=a[g],i=[],j=0;j<h.length;j++)e.indexOf(h[j])&&i.push(h[j]);if(i.length>0){for(var k=b[d].amount/i.length,l=0;l<i.length;l++)c.push({player:i[l],amount:k});f=!0}}else{var m=a[g];e.indexOf(m)>=0&&(c.push({player:m,amount:b[d].amount}),f=!0)}if(!f)throw"Insufficient ranking. Side pot #"+d+" could not be paid out."}this.getCurrentHand().payments=c;for(var n=0;n<c.length;n++){var o=c[n];t(o.player,o.amount)}u()},this.resolveCurrentHandWithoutShowdown=function(){if(this.doesHandRequireMoreAction())throw"Hand requires more action";if(this.doesHandRequireShowdown())throw"Hand requires showdown";for(var a=[],b=0;b<this.players.length;b++)this.finishedPlayers.indexOf(b)<0&&this.getCurrentHand().foldedPlayers.indexOf(b)<0&&a.push(b);if(1!==a.length)throw"Zero or more than one player have not folded, cannot resolve hand";for(var c=a[0],d=this.convertToSidePots(this.getCurrentHand().pot),e=[],f=0;f<d.length;f++){var g=d[f];if(g.eligiblePlayers.indexOf(c)<0)throw"Only non-folded player does not appear in eligible players";e.push({player:c,amount:g.amount})}for(var h=0;h<e.length;h++){var i=e[h];t(i.player,i.amount)}u()},this.convertToSidePots=function(a){var b=this.getCurrentHand().foldedPlayers,c=o(a,b);c.push(0);var d=c.length-1;c.sort(function(a,b){return a-b});for(var e=[],f=0;d>f;f++)e.push({amount:0,eligiblePlayers:[]});for(var g=0;d>g;g++)for(var h=0;h<this.players.length;h++)a.commitments.hasOwnProperty(h)&&(e[g].amount+=Math.max(Math.max(Math.min(a.commitments[h],c[g+1]),0)-c[g],0),b.indexOf(h)<0&&a.commitments[h]>c[g]&&e[g].eligiblePlayers.push(h));return e},this.getAmountToCallForPlayer=function(a){var b=m(l()),c=n(b);if(a==c.player)return!1;if(0===c.amount)return!1;var d=b[a]||0;return Math.min(this.players[a].stack,c.amount-d)},this.getAmountToMinRaiseForPlayer=function(a){var b=l([d.BET,d.RAISE]),c=m(l()),e=this.players[a].stack;if(0===b.length)return Math.min(e,this.getCurrentHand().blinds.bigBlind);var f=b[b.length-1];if(a===f.player)return!1;if(1===b.length){var g=b[0];return Math.min(e,2*g.amount)}var h=b[b.length-2],i=c[f.player],j=c[h.player],k=c[a]||0,n=this.getCurrentHand().blinds.bigBlind,o=i+Math.max(i-j,n)-k;return i>=o+k||i>=e+k?!1:Math.min(e,o)},this.isCheckingAnOptionForPlayer=function(a){var b=m(l()),c=n(b);return c&&0!==c.amount?b[a]===c.amount?!0:!1:!0},this.isBettingAnOptionForPlayer=function(){var a=m(l()),b=n(a);return!b||0===b.amount}}]),c.factory("uiService",["$modal",function(a){return{successMessage:function(a){alertify.success(a)},errorMessage:function(a){alertify.error(a)},infoMessage:function(a){alertify.info(a)},promptForNewPlayer:function(b){var c=a.open({animation:!0,templateUrl:"/partials/add-player",controller:"AddPlayerController",size:"sm",backdrop:!0});c.result.then(b)},promptForHoleCards:function(b,c,d){a.open({animation:!0,templateUrl:"/partials/assign-hole-cards",controller:"HoleCardsController",size:"md",backdrop:!0,resolve:{player:function(){return b},card1:function(){return c},card2:function(){return d}}})},confirmDecision:function(a,b,c,d,e){alertify.set({labels:{ok:b,cancel:c}}),alertify.confirm(a,function(a){a?d&&d():e&&e()})}}}]),c.service("cardService",[function(){this.getCardImagePath=function(a,b){return"/img/"+a+"_of_"+b+".svg"},this.allSuits=[{abbreviation:"C",name:"Clubs",code:"clubs",icon:"♣",color:"black"},{abbreviation:"D",name:"Diamonds",code:"diamonds",icon:"♦",color:"red"},{abbreviation:"H",name:"Hearts",code:"hearts",icon:"♥",color:"red"},{abbreviation:"S",name:"Spades",code:"spades",icon:"♠",color:"black"}],this.allRanks=[{abbreviation:"A",name:"Ace",code:"ace"},{abbreviation:"2",name:"Deuce",code:"2"},{abbreviation:"3",name:"Trey",code:"3"},{abbreviation:"4",name:"Four",code:"4"},{abbreviation:"5",name:"Five",code:"5"},{abbreviation:"6",name:"Six",code:"6"},{abbreviation:"7",name:"Seven",code:"7"},{abbreviation:"8",name:"Eight",code:"8"},{abbreviation:"9",name:"Nine",code:"9"},{abbreviation:"T",name:"Ten",code:"10"},{abbreviation:"J",name:"Jack",code:"jack"},{abbreviation:"Q",name:"Queen",code:"queen"},{abbreviation:"K",name:"King",code:"king"}],this.getSuitByCode=function(a){for(var b=0;b<this.allSuits.length;b++){var c=this.allSuits[b];if(c.code===a)return c}},this.getRankByCode=function(a){for(var b=0;b<this.allRanks.length;b++){var c=this.allRanks[b];if(c.code===a)return c}},this.areCardsEqual=function(a,b){return a.suit===b.suit&&a.rank===b.rank}}])}(window),function(){var a=angular.module("holdemConstants",[]);a.constant("HOLDEM_EVENTS",{GAME_STARTED:"gameStarted",PLAYER_ADDED:"playerAdded",PLAYER_DELETED:"playerDeleted",NEXT_HAND_DEALT:"nextHandDealt",ROLES_ASSIGNED:"rolesAssigned",ACTION_PERFORMED:"actionPerformed",BETTING_ROUND_ADVANCED:"bettingRoundAdvanced",TURN_ASSIGNED:"turnAssigned",PLAYER_WON_MONEY:"playerWonMoney",PLAYER_FINISHED:"playerFinished",PLAYER_WON_TOURNAMENT:"playerWonTournament"}),a.constant("HOLDEM_ACTIONS",{FOLD:"fold",CALL:"call",RAISE:"raise",BET:"bet",CHECK:"check"}),a.constant("HOLDEM_BETTING_ROUNDS",{PRE_FLOP:"pre_flop",FLOP:"flop",TURN:"turn",RIVER:"river"})}(window);
//# sourceMappingURL=holdemApp.min.js.map